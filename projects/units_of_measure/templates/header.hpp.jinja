///
/// @file
/// This is an auto-generated header for {{namespace}}::{{classname}}.
/// {{comment}}
/// @note See README on re-generation.
/// @copyright Copyright {{year}}.
///
#pragma once
#include <cstdint>
#include <cstddef>

#include "iso/measurement.hpp"

/// {{namespace}} comment
namespace {{namespace}} {

/// A structure used to hold the postfix for {{classname}}
struct suffix_type_{{postfix}} {
    constexpr static char const *suffix = "{{postfix}}";
};

///
/// This is the {{namespace}}::{{classname}} interface.
/// These have a default, generic, SI, copy, move, dtor and copy assign
/// And operator"" and equality and inequality
/// overload +=,-=,+,- with other units of the same type
/// overload *=,/=,*,/ with immediate values and atomics
/// overload ++,-- ?
/// overload >,<,==,!=,<=,>=
/// not overloaded %=,%
///
class {{classname}} : public measurement<{{typename}}, {{scaletype}}, suffix_type_{{postfix}}> {
public:
    /// Default constructor
    {{classname}}();
    /// Parameter constructor
    explicit {{classname}}({{typename}} value);
    /// Copy Constructor
    {{classname}}({{classname}} const& other);
    /// Move Constructor
    {{classname}}({{classname}}&& other);
    /// Destructor
    ~{{classname}}() = default;
    /// Const Copy Assignment
    {{classname}}& operator=({{classname}} const& other) noexcept;
    /// Copy Assignment
    {{classname}}& operator=({{classname}}& other) noexcept;
    /// Move Assignment
    {{classname}}& operator=({{classname}}&& other) noexcept;
    /// Equality Operator
    bool operator==({{classname}} const& other) const;
    /// Inequality Operator
    bool operator!=({{classname}} const& other) const;
    /// Accumulation Operator
    {{classname}}& operator+=({{classname}} const& other);
    /// Deccumulation Operator
    {{classname}}& operator-=({{classname}} const& other);
    /// Scaling Operator
    {{classname}}& operator*=({{typename}} factor);
    /// Inverse Scaling Operator
    {{classname}}& operator/=({{typename}} factor);
    /// Negating Operator
    {{classname}} operator-() const;
    /// Less Than Operator
    bool operator<({{classname}} const& other) const;
    /// Less Than or Equal Operator
    bool operator<=({{classname}} const& other) const;
    /// Greater Than Operator
    bool operator>({{classname}} const& other) const;
    /// Greater Than or Equal Operator
    bool operator>=({{classname}} const& other) const;
};

namespace operators {
    /// Addition operator
    {{classname}} operator+({{classname}} const& A, {{classname}} const& B);
    /// Subtraction operator
    {{classname}} operator-({{classname}} const& A, {{classname}} const& B);
    /// Left Scaling Operator
    {{classname}} operator*({{classname}} const& A, {{typename}} factor);
    /// Right Scaling Operator
    {{classname}} operator*({{typename}} factor, {{classname}} const& A);
    /// Inverse Scaling Operator
    {{classname}} operator/({{classname}} const& A, {{typename}} factor);
    /// Scale factor
    precision operator/({{classname}} const& A, {{classname}} const& B);
}

namespace literals {
    /// Literal Double, Quote Operator
    {{classname}} operator""_{{postfix}}(long double value);
    /// Literal Int, Quote Operator
    {{classname}} operator""_{{postfix}}(unsigned long long value);
    /// Literal String, Quote Operator
    iso::{{classname}} operator""_{{postfix}}(char const a[]);
}

}
